import{_ as a,c as n,o as t,aa as s}from"./chunks/framework.DtK4gh9F.js";const v=JSON.parse('{"title":"00 手写简易版MVC框架SmartMvc","description":"","frontmatter":{"title":"00 手写简易版MVC框架SmartMvc","author":"Herman","updateTime":"2021-08-14 13:41","desc":"深入解析SpringMVC核心原理：从手写简易版MVC框架开始(SmartMvc)","categories":"MyProjects","tags":"SpringMvc/MVC","outline":"deep"},"headers":[],"relativePath":"Notes/No1MyProjects/02 SmartMvc/00 深入解析SpringMVC核心原理：从手写简易版MVC框架开始(SmartMvc)-00深入解析springmvc核心原理从手写简易版mvc框架开始smartmvc.md","filePath":"Notes/No1MyProjects/02 SmartMvc/00 深入解析SpringMVC核心原理：从手写简易版MVC框架开始(SmartMvc)-00深入解析springmvc核心原理从手写简易版mvc框架开始smartmvc.md","lastUpdated":1723606122000}'),e={name:"Notes/No1MyProjects/02 SmartMvc/00 深入解析SpringMVC核心原理：从手写简易版MVC框架开始(SmartMvc)-00深入解析springmvc核心原理从手写简易版mvc框架开始smartmvc.md"},i=s(`<h4 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h4><p>SpringMVC可以说的上是当前最优秀的MVC框架，采用了松散耦合可插拔组件结构，比其他MVC框架更具扩展性和灵活性；为了提高框架的扩展性和灵活性，设计了松耦合可插拔的组件。理解SpringMVC的原理，在面试或工作中都十分的重要。</p><p>SpringMVC的原理在网络上到处都可以找得到，但是写的都很概括、零散；对应阅读源码经验较少的小伙伴来说， 自己去看源码被很多细节所干扰阻碍，不能够很好的抽离出springMVC原理的主线。</p><p>自己想和小伙伴一起从手写简易版的SmartMVC框架出发，理出SpringMVC的主线并深入理解SpringMVC的原理。框架代码开发加上文档编写大概花费时间一个月</p><hr><h4 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SmartMvc</span></span>
<span class="line"><span>├── docs -- 开发文档</span></span>
<span class="line"><span>├── smart-mvc -- 实现mvc功能的核心代码</span></span>
<span class="line"><span>├── smartmvc-springboot-autoconfigure -- SmartMvc的自动化配置</span></span>
<span class="line"><span>├── smartmvc-springboot-demo -- SmartMvc的demo项目</span></span>
<span class="line"><span>├── smartmvc-springboot-starter -- SmartMvc的starter</span></span>
<span class="line"><span>└── spring-mvc-demo -- SpringMVC的demo</span></span></code></pre></div><hr><h4 id="ide、源码、依赖版本" tabindex="-1">IDE、源码、依赖版本 <a class="header-anchor" href="#ide、源码、依赖版本" aria-label="Permalink to &quot;IDE、源码、依赖版本&quot;">​</a></h4><ul><li>JDK的版本1.8</li><li>整个开发过程中我使用的IDE都是IDEA，可以根据读者自己习惯选择。当然我推荐是用IDEA</li><li>开发SmartMVC我们需要使用到Spring，我使用的版本<code>5.2.9</code></li><li>整个框架已经开发完成，SmartMVC的源码地址： <ol><li>Github： <a href="https://github.com/silently9527/SmartMvc" target="_blank" rel="noreferrer">https://github.com/silently9527/SmartMvc</a></li><li>码云：<a href="https://gitee.com/silently9527/SmartMvc" target="_blank" rel="noreferrer">https://gitee.com/silently9527/SmartMvc</a></li></ol></li></ul><blockquote><p>大家记得顺手给个star哦</p></blockquote><hr><h4 id="约定" tabindex="-1">约定 <a class="header-anchor" href="#约定" aria-label="Permalink to &quot;约定&quot;">​</a></h4><ul><li>为了便于后期理解和使用SpringMVC，所以在SmartMVC中所有组件的名称都和SpringMVC的保持一致</li><li>为了让SpringMVC的核心流程更加的清晰，减少的干扰，我拿出了自己18米的砍刀大胆的砍掉了SpringMVC中很多细节流程，达到去枝干立主脑，让我们能够更加顺畅的理解请求的处理过程</li></ul><hr><h4 id="文档目录" tabindex="-1">文档目录 <a class="header-anchor" href="#文档目录" aria-label="Permalink to &quot;文档目录&quot;">​</a></h4><p>所有开发文档都在项目的<code>docs</code>目录下</p><ul><li>01 SmartMVC总体架构规划</li><li>02 RequestMappingHandlerMapping初始化过程</li><li>03 拦截器HandlerInterceptor</li><li>04 HandlerMapping获取对应的Handler</li><li>05 参数解析器HandlerMethodArgumentResolver</li><li>06 返回解析器HandlerMethodReturnValueHandler</li><li>07 Handler执行器InvocableHandlerMethod</li><li>08 实现RequestMappingHandlerAdapter</li><li>09 视图InternalResourceView、RedirectView</li><li>10 视图解析器ViewResolver</li><li>11 DispatcherServlet实现doDispatch来完成请求逻辑</li><li>12 全局异常处理器HandlerExceptionResolver</li><li>13 核心配置类WebMvcConfigurationSupport</li><li>14 SmartMvc与SpringBoot集成(一)</li><li>15 SmartMvc与SpringBoot集成(二)</li><li>16 SmartMvc项目实战</li></ul><hr><h3 id="springboot项目中引入smartmvc的步骤" tabindex="-1">SpringBoot项目中引入SmartMVC的步骤 <a class="header-anchor" href="#springboot项目中引入smartmvc的步骤" aria-label="Permalink to &quot;SpringBoot项目中引入SmartMVC的步骤&quot;">​</a></h3><h4 id="_1-新建一个springboot项目-在pom-xml中加入smartmvc的starter" tabindex="-1">1. 新建一个SpringBoot项目，在pom.xml中加入SmartMVC的starter <a class="header-anchor" href="#_1-新建一个springboot项目-在pom-xml中加入smartmvc的starter" aria-label="Permalink to &quot;1. 新建一个SpringBoot项目，在pom.xml中加入SmartMVC的starter&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.silently9527&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;smartmvc-springboot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h4 id="_2-修改springboot生成的启动类-指定smartmvc的applicationcontextclass" tabindex="-1">2. 修改SpringBoot生成的启动类，指定SmartMVC的<code>ApplicationContextClass</code> <a class="header-anchor" href="#_2-修改springboot生成的启动类-指定smartmvc的applicationcontextclass" aria-label="Permalink to &quot;2. 修改SpringBoot生成的启动类，指定SmartMVC的\`ApplicationContextClass\`&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@SpringBootApplication</span></span>
<span class="line"><span>public class SmartmvcSpringbootDemoApplication {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        SpringApplication application = new SpringApplication(SmartmvcSpringbootDemoApplication.class);</span></span>
<span class="line"><span>        application.setApplicationContextClass(ServletWebServerApplicationContext.class);</span></span>
<span class="line"><span>        application.run(args);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,24),r=[i];function p(l,o,c,m,d,g){return t(),n("div",null,r)}const S=a(e,[["render",p]]);export{v as __pageData,S as default};
