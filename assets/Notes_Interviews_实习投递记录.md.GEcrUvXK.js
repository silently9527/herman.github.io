import{_ as p,D as h,c as e,j as s,a as i,I as a,w as n,aa as t,o as k}from"./chunks/framework.Bjo6InTf.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{"updateTime":"2024-07-24 23:48","desc":"2023/24年寒假/暑期实习投递记录，跌跌撞撞一路打怪升级！🏃‍♂️","tags":"面经/实习"},"headers":[],"relativePath":"Notes/Interviews/实习投递记录.md","filePath":"Notes/Interviews/实习投递记录.md","lastUpdated":1723472907000}'),o={name:"Notes/Interviews/实习投递记录.md"},E=s("h2",{id:"字节跳动-商业化技术",tabindex:"-1"},[i("字节跳动 - 商业化技术 "),s("a",{class:"header-anchor",href:"#字节跳动-商业化技术","aria-label":'Permalink to "字节跳动 - 商业化技术"'},"​")],-1),r=t('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>值得一提的是，这是我人生中第一场求职面试。当时看群友说组内要 25 届可以简历直推,就加好友发了简历,没想到单薄的简历通过了筛选,稀里糊涂地约面了.处女面给了字节,不出意外一面就挂了.</p><p>也算是打响前端面试第一枪哈哈哈哈哈</p></div><p>面试时间： 2023-07-26</p><p><strong>一面</strong></p><ol><li>为什么选择前端？</li><li>聊了一下简历上写的获奖经历具体做了什么</li><li>CSS 盒模型</li><li>Github 发现最近在用 tailwindCSS 问我用起来的感受，有什么优点</li><li>有没有了解过模块化 CSS</li><li>HTTP 状态码</li><li>由上一问的 304 引出浏览器的缓存机制</li><li>js 原型链相关</li><li>判断数据类型有哪些方法</li><li>Vue 响应式原理</li><li>同源策略与跨域解决方案</li><li>webpack 和 npm 前端工程化相关</li></ol><p>手撕代码：</p><ol><li>给定形如 <code>a.b.c.d</code> 的字符串，构造一个对象如下: <code>{ a:{ b:{ c:{ d:null } } } }</code></li><li>合并两个有序数组</li></ol><h2 id="momenta" tabindex="-1">Momenta <a class="header-anchor" href="#momenta" aria-label="Permalink to &quot;Momenta&quot;">​</a></h2>',7),d=t('<div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2023-11-24 投递简历</li><li>2023-11-28 下午一面,结束后立马约二面</li><li>2023-11-29 上午二面,中午 OC</li><li>2023-12-04 发放正式 Offer</li></ul></div><p><strong>一面</strong></p><ol><li>青训营经历简单介绍</li><li>手撕算法: <a href="https://leetcode.cn/problems/merge-intervals/?envType=study-plan-v2&amp;envId=top-100-liked" target="_blank" rel="noreferrer">56. 合并区间</a>,要求原地操作数组.</li><li>反问环节</li></ol><p><strong>二面</strong></p><ol><li>如何调试 hover 样式(我的回答是开发者工具中可以勾选,但是存在不够精确的问题)</li><li>除了使用 vercel 之外,有没有自己去尝试过部署前端项目</li><li>有没有用过 Docker</li><li>浏览器跨域解决方案</li><li>有没有用过 iframe 标签</li><li>git rebase 有用过吗(没有,但是个人比较常用 git stash)</li><li>介绍一下青训营的项目 -&gt; NPM 的扁平化安装机制</li><li>关于事件循环的一个场景题: 在 JavaScript 中，你在一段同步代码中创建了一个 Promise。然后，在代码的末尾，你编写了一个 while(flag)循环来阻塞程序的执行。你的计划是在 Promise 的回调函数中将 flag 设置为 false，这样就可以退出这个循环。然而，由于 JavaScript 的事件循环机制，这种做法在 JavaScript 中是行不通的。有没有什么方法可以让这种情况在 JavaScript 中成为可能。</li><li>前端工具链: Rollup / Webpack / Vite 的使用经验与理解</li><li>UI 组件测试是否了解</li><li>TailwindCSS 暗黑模式布局是如何实现的，常规 CSS 如何实现暗黑模式的布局</li><li>虚拟滚动技术如何实现的</li><li>项目中的防抖具体是如何实现与应用的</li><li>反问</li></ol><h2 id="滴滴" tabindex="-1">滴滴 <a class="header-anchor" href="#滴滴" aria-label="Permalink to &quot;滴滴&quot;">​</a></h2>',6),g=t(`<div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2023-11-23 投递简历</li><li>2023-11-29 约面</li><li>2023-12-01 一面</li></ul></div><p><strong>一面</strong></p><ol><li>介绍一下青训营的项目,在其中扮演了怎样的角色</li><li>CSS 定位有哪些 -&gt; 讲讲 sticky</li><li>Webpack 的使用情况</li><li>浏览器从输入 URL 到页面呈现的过程发生了什么</li><li>同源策略与跨域解决方案</li></ol><p>手撕代码:</p><ol><li>对象数组根据 key 值去重</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Anna&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="2"><li>嵌套对象数组根据 key 值去重</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;children&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Linda&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Anna&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;children&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="3"><li>判断回文字符串</li></ol><p>emmmm,八股答得也还行,手撕代码也全都做出来了,但是没有后续流程了...</p><h2 id="零一跃动" tabindex="-1">零一跃动 <a class="header-anchor" href="#零一跃动" aria-label="Permalink to &quot;零一跃动&quot;">​</a></h2>`,11),c=t('<p>面试时间： 2023-11-19</p><div class="info custom-block"><p class="custom-block-title">题外话</p><p>当天投递当天约面，之前在 BOSS 一直没人回复，更新简历后立马有人约面了！</p><p>建议在下午三点发起对话，好像回复率很高！</p></div><ol><li>自我介绍</li><li>挑选一个项目进行详细介绍</li><li>项目的技术选型是怎么考虑的</li><li>说一下不同技术选型给你带来的体验</li></ol><p>（这里我提到了 js 和 ts 在类型提示上的区别以及普通 css 与 tailwind 的区别）</p><ol start="5"><li>项目中与后端接口联调的流程是怎样的</li><li>在你使用 tailwind 时遇见复杂的样式如何处理（老老实实回归普通 css）</li><li>盒子模型: <code>content-box</code> 与 <code>border-box</code></li><li>防抖节流: 说一下应用场景与口胡实现原理</li><li>项目中用到过哪些组件通信的方式（答得感觉不是很满意，我真的只用过 props 与 emit 😭）</li><li>深拷贝实现方式（JSON 与手写深拷贝）</li><li>对 async/await 与 Promise 的理解（解决回调地狱的问题，语法糖提高代码可读性）</li><li>平常开发中如何进行代码调试</li><li>Vue 中 key 的作用（与 diff 算法相关，为了更好的复用 DOM 节点，提高渲染性能） <ul><li>如果一个列表中有两个元素的 key 值相同，那么会带来什么影响（错误更新）</li></ul></li><li>什么时候接触前端？对后端有了解吗？</li><li>反问。</li></ol><p>半小时结束，当晚约线下详谈。</p><h2 id="话树网络" tabindex="-1">话树网络 <a class="header-anchor" href="#话树网络" aria-label="Permalink to &quot;话树网络&quot;">​</a></h2>',7),y=t('<div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2023-11-15 下午投递，当晚发送笔试邮件</li><li>2023-11-20 约面</li><li>2023-11-24 面试</li></ul></div><ol><li>自我介绍</li><li>对于 H5 语义化标签的理解</li><li>逻辑像素与物理像素是什么，如何去调整？（答得不是很好）</li><li>单页面应用和服务端渲染应用的区别 ❌</li><li>如何实现一个简单的 loading 遮罩</li><li>relative / absolute / fixed 定位的区别 🍧</li><li>实现一个元素的显示和隐藏，以及不同方法的区别 🍩</li><li>回流与重绘</li><li>V-if 与 V-show 的区别</li><li>Vue 中 key 的作用</li><li>CSS 盒模型</li><li>outline 属性是否会占用宽度</li><li>flex: 1 是什么的简写，以及三个属性的含义 🏃‍♂️</li><li>for...of... 与 for...in... 的区别</li><li>Vue 修饰符 .prevent 与 .stop 的区别</li><li>事件冒泡与事件捕获</li><li>弱等于(==) 与 强等于(===) 的区别</li><li>类型转换 0 == false 的结果</li><li>Vuex 与 Pinia 在设计上的优势与劣势</li><li>Vuex 中有 Mutation 的操作，为什么 Pinia 中没有</li><li>用过 hooks 吗</li><li>reactive 与 ref 在使用上有什么区别</li><li>Vue 响应式原理（开始吟唱 🥰！）</li><li>设计模式相关，了解工厂模式吗</li><li>了解 CDN 吗？是为了解决什么问题，具体的原理是怎样的</li><li>怎样学习前端的</li><li>阅读英文文档有问题吗，开始闲聊....</li></ol><p>结束后，约线下简单笔试。</p><h2 id="卫翎科技" tabindex="-1">卫翎科技 <a class="header-anchor" href="#卫翎科技" aria-label="Permalink to &quot;卫翎科技&quot;">​</a></h2>',4),u=t(`<div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2023-11-23 上午 hr 发起打招呼,遂投递简历,下午约面</li><li>2023-11-27 一面</li><li>2023-11-29 上午约二面, 下午二面</li></ul></div><p><strong>一面</strong></p><ol><li>自我介绍</li><li>字节青训项目中最有挑战或者收获的点</li><li>lint-staged 的主要作用是什么(搭配 husky 在 commit 时进行代码检查,面试官补充说只对暂存区的代码进行检查)</li><li>Vuex 与 Pinia 的区别 💤 (以为掌握了但答得并不好！)</li><li>为什么需要对 axios 进行二次封装</li><li>虚拟滚动是如何实现的</li><li>项目中的防抖技术做了什么</li><li>CSS 中 px,rem,em 分别是什么</li><li>水平垂直居中的实现方式</li><li>position 有哪些属性, absolute 是相对于谁的</li><li>盒模型</li><li>隐藏一个元素的方式: display(回流) / visibility(重绘) / opacity(硬件加速)</li><li>flex 布局设置元素间隙的方式 <code>gap</code></li><li>JavaScript 中判断数据类型的方法</li><li>this 的指向???完全不知道怎么说,让我看代码讲还可以</li><li>改变 this 指向的方法 -&gt; call 与 apply 的区别</li><li>箭头函数有 this 吗?</li><li>讲讲原型和原型链</li><li>讲讲 Event Loop</li><li>script 标签会阻塞 DOM 的解析吗 -&gt; 有什么方式可以解决这个问题</li><li>讲讲你对 Promise 的理解 <ol><li>Promise 三种状态: pending / fulfilled / rejected</li><li>链式调用是如何实现的: then 方法返回的是一个新的 Promise 对象</li></ol></li><li>数据类型的隐式转换 <ol><li>发生时机：算术运算符 / 比较运算符 / 逻辑运算符 / if 语句</li><li>&quot;1&quot; + 1 的结果(&quot;11&quot;)</li><li>&quot;2&quot; - 1 的结果(1)</li></ol></li></ol><p>看代码说结果:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-KlUcu" id="tab-1pBOzrH" checked><label for="tab-1pBOzrH">Problem 1</label><input type="radio" name="group-KlUcu" id="tab-fgHljpj"><label for="tab-fgHljpj">Problem 2</label><input type="radio" name="group-KlUcu" id="tab-GgpB9Zz"><label for="tab-GgpB9Zz">Problem 3</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;then&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;catch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// then success1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Promise 状态改变后就不能再改变,虽然后面的代码还能继续执行.</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;undefined&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Goodbye &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Goodbye Jack</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// var 变量提升: 只提升定义不提升赋值,并且之提升到所在的作用域的顶部</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;time span&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;time span&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f2, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> waitForMs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitForMs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在执行 setTimeout(f1, 100) 后会开启一个定时器,并在 100ms 后将 f1 放入宏任务队列, 但是回调函数 f1 并不会立即执行,而是等主线程空闲才会执行.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 上述代码的执行过程是:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 1. 执行 setTimeout(f1, 100)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 2. 执行 setTimeout(f2, 200)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 3. 执行 waitForMs(500);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 4. 由于 waitForMs(500) 会阻塞主线程 500ms, 此时 f1 与 f2 已经被放入宏任务队列中会被取出并且立即执行,所以 time span 实际上是执行带来的延迟而非定时器的延迟.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div></div></div><p><strong>二面</strong></p><ol><li>为什么选前端</li><li>职业规划，对前端的发展方向有了解吗？</li><li>Github 活跃一般是在看哪些内容？</li><li>介绍一下项目中最有挑战的点</li><li>对这份工作有什么期待</li><li>有没有关注 AI 相关的内容</li></ol><p>emmm，其实就是氛围很轻松的闲聊。</p><p>结束后 hr 约线下详谈。</p><h2 id="冰智科技" tabindex="-1">冰智科技 <a class="header-anchor" href="#冰智科技" aria-label="Permalink to &quot;冰智科技&quot;">​</a></h2>`,10),F=t('<div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2024-02-16 打招呼投简历</li><li>2024-02-18 一面</li><li>2024-02-24 二面</li></ul></div><p><strong>一面</strong></p><ol><li>自我介绍与实习经历介绍</li><li>Vue3 生命周期</li><li>v-if 与 v-show 的区别</li><li>什么是虚拟 DOM</li><li>useState 和 useEffect 如何使用</li><li>React 中 state 与 props 有什么区别（通常 state 的改变由网络请求或者用户操作引起，props 由父组件传递）</li><li>key 的作用</li><li>实习：如何进行项目规范搭建</li><li>实习：如何进行性能优化</li><li>项目：介绍一下项目中如何使用 rollup 的</li><li>手写代码：现场其一个 react 项目并实现一个 TodoList</li></ol><p><strong>二面</strong></p><ol><li>垂直居中的几种方式</li><li>flex 布局的几个属性及其含义</li><li>0.1 + 0.2 为什么不等于 0.3</li><li>如何理解闭包, 闭包的使用场景</li><li>什么是宏任务和微任务</li><li>事件循环机制, 并看代码说结果</li><li>cookie , LocalStorage, SessionStorage 的区别</li><li>http 状态码</li><li>由 304 状态码引发浏览器缓存机制, 协商缓存与强缓存</li><li>哪些资源需要进行 CDN 加速</li><li>React 中为什么 hooks 不能在条件语句中使用?</li><li>useEffect 使用场景, dependencies 的作用, 返回值的作用</li><li>React 父子组件通信的方式</li><li>Vuex 的使用场景与基本原理</li><li>Vuex 状态变更如何引起视图更新, 原理是什么</li><li>虚拟 DOM</li><li>webpack 中的 loader 与 plugin 的区别</li><li>sourceMap 的作用</li><li>打包方面的性能优化</li><li>最近做的项目中遇到的难点, 如何解决的</li><li>青训营项目</li><li>算法：二叉树的层序遍历</li><li>反问, 提升空间： 工程化与框架原理</li></ol><h2 id="新旦智能" tabindex="-1">新旦智能 <a class="header-anchor" href="#新旦智能" aria-label="Permalink to &quot;新旦智能&quot;">​</a></h2>',6),_=t('<p>面试时间： 2024-02-19</p><ol><li>自我介绍与实习经历</li><li>实习中的性能优化是如何做的</li><li>日常中遇到问题, 你会通过哪些渠道去解决</li><li>重绘与重排的区别</li><li>Vue2 与 Vue3 的区别</li><li>Vue 的响应式原理</li><li>如何理解响应式布局, 如何实现响应式的布局</li><li>原型与原型链的理解</li><li>CDN 加速的概念与原理</li><li>对闭包的理解</li><li>JavaScript 与 TypeScript 的区别</li></ol><h2 id="微软" tabindex="-1">微软 <a class="header-anchor" href="#微软" aria-label="Permalink to &quot;微软&quot;">​</a></h2>',3),C=t(`<div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2024-02-21 一面</li><li>2024-02-26 二面</li><li>2024-02-27 三面</li></ul></div><p><strong>一面</strong></p><ol><li>自我介绍与实习经历</li><li>学业相关</li><li>算法：反转链表</li><li>算法：求一个数开方后的整数部分</li></ol><p><strong>二面</strong></p><ol><li>实习工作内容, 如何完善前端开发规范的</li><li>for...in 与 for...of 的区别</li><li>async/await 的理解</li><li>是否了解 AST ? 是否了解 ESLint 的原理</li></ol><p>看代码说结果：</p><ol><li>具名导入与默认导出</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// utils.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> minus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./utils&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如何调用相关函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// sum.default(1, 2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// sum.minus(1, 2)</span></span></code></pre></div><ol start="2"><li>var / let / const 的变量提升</li></ol><blockquote><p>let 与 const 都存在变量提升, 提升到块级作用域顶部, 但同时也存在暂时性死区的概念</p></blockquote><ol start="3"><li>给函数的属性赋值是否会报错</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fn.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>算法题</strong>：给定一个数字, 你可以将该数字中的任意一种数字替换为另一种数字, 例如你可以将该数中的所有 0 替换为 1. 你只能将一种数字替换为另一种数字, 请问通过该替换操作能得到的最大值与最小值之差为多少？</p><p><strong>三面</strong></p><ol><li>自我介绍与实习经历</li><li>是否了解过性能优化, 有哪些方式</li><li>原生实现 tooltip</li><li>CSS 如何绘制一个三角形</li><li>算法：手写堆排序</li><li>算法：lc 168. Excel 表列名称</li></ol><h2 id="哔哩哔哩" tabindex="-1">哔哩哔哩 <a class="header-anchor" href="#哔哩哔哩" aria-label="Permalink to &quot;哔哩哔哩&quot;">​</a></h2>`,16),m=t('<div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2024-02-20 投递简历</li><li>2024-02-23 一面</li><li>2024-02-27 二面</li></ul></div><p><strong>一面</strong></p><ol><li>为什么离职</li><li>如何学习前端的</li><li>TypeScript 常见的工具函数</li><li>flex 布局常用属性</li><li>如何理解 Promise, 有哪些常见的方法</li><li>原型与原型链的理解</li><li>npm 版本 <code>^</code> 与 <code>~</code> 的区别: 前者兼容大版本, 后者兼容次版本</li><li>npm 三位数版本号的含义: breaking change, feature, bug fix</li><li>package-lock.json 的作用以及安装顺序: 如果与 package.json 冲突, 以 package.json 为准</li><li>跨域问题与解决方案</li><li>rem 理解</li><li>iframe 的作用与使用场景, 如何与父级通信, 如果遇到跨域问题如何解决</li><li>普通函数与箭头函数的区别, 箭头函数的 this 指向</li><li>对于闭包的理解</li><li>实习业务介绍</li><li>项目难点</li><li>项目中遇到的性能优化是如何做的</li><li>前端性能优化有哪些方向</li><li>竞态问题如何解决, 点击 TabA, 数据未返回又点击 TabB, 数据返回了, 如何保证数据的正确性</li><li>浏览器缓存</li><li>如何实现七天免登陆</li></ol><p><strong>二面</strong></p><ol><li>实习工作内容描述, 如何进行性能优化</li><li>怎么从 vue 转到 react 的？</li><li>介绍青训营项目</li><li>青训项目：npm 安装机制</li><li>CSS：position 有哪些值, 分别代表什么意思, 分别相对于谁定位</li><li>CSS: 如何实现一个正方形</li><li>手写代码, 原生实现一个点击 tab 切换的效果</li><li>事件委托与 react 中的事件机制</li></ol><h2 id="百度" tabindex="-1">百度 <a class="header-anchor" href="#百度" aria-label="Permalink to &quot;百度&quot;">​</a></h2><p>部门：质量效能</p>',7),b=t(`<div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2024-02-27 一面</li><li>2024-02-27 二面</li><li>2024-03-06 三面</li></ul></div><p><strong>一面</strong></p><ol><li>实习经历业务介绍</li><li>Vue 响应式原理, 开始吟唱 😎</li><li>Vue 常见的指令</li><li>V-if 与 V-show 的区别</li><li>输入 URL 到页面展示的过程</li><li>定义 CSS 的三种方式</li><li>CSS 选择器与优先级</li><li>get 请求与 post 请求的区别, 传参格式与传参位置有什么区别</li><li>跨域问题与解决方案</li><li>设计实现七天免密登录</li><li>算法：括号合法性判断</li></ol><p><strong>二面</strong></p><ol><li>为什么离职</li><li>输入 URL 到页面展示的过程（怎么又问一遍</li><li>手写代码，原生实现输入框输入时, p 标签中同步显示输入内容</li><li>用过哪些 Linux 命令</li><li>看代码说结果:</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4 4 4</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解释: 先执行完 for 循环, i 的值变为 4, 然后再执行宏任务</span></span></code></pre></div><ol start="6"><li>什么是 XSS 攻击</li><li>如何理解 Promise, 有哪些常见的方法</li></ol><p><strong>三面</strong></p><ol><li>实习难点</li><li>React 与 Vue 的区别</li><li>新项目技术选型, 可以从哪些维度考虑使用 React 或者 Vue</li></ol><h2 id="腾讯" tabindex="-1">腾讯 <a class="header-anchor" href="#腾讯" aria-label="Permalink to &quot;腾讯&quot;">​</a></h2>`,10),A=t('<p>部门：QQ</p><div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2024-03-01 简历被捞，遂约面</li><li>2024-03-07 一面</li><li>2024-03-08 二面</li><li>2024-03-11 三面</li></ul></div><p><strong>一面</strong></p><ol><li>实习经历与难点介绍</li><li>实习过程中的依赖升级是如何做的</li><li>npm 扁平安装机制如何处理版本冲突</li><li>package-lock.json 的作用</li><li>类型体操：泛型函数</li><li>算法：LRU 缓存</li><li>content-type 有哪些值, 分别代表什么?</li></ol><p><strong>二面</strong></p><ol><li>实习业务介绍</li><li>React18 有哪些新特性（直接用的就是 18 版本，遂回答刷视频看到过的 React 19 的新特性）</li><li>常用的 hooks 有哪些</li><li>React Fiber 架构了解吗</li><li>Vue 组件通信方式 <ol><li>props 与 emit</li><li>provide 与 inject</li><li>expose 与 ref</li><li>全局状态管理</li></ol></li><li>Vuex 实现原理</li><li>输入 URL 到页面展示的过程</li><li>解析 HTML 时遇见 script 标签如何处理，script 的 defer 与 async 的区别</li><li>了解过哪些性能优化方案</li><li>Vue-router 的实现原理</li><li>http1.0 / 1.1 / 2.0 的区别</li><li>cookie 的作用与常见属性</li><li>开发中如何查看网络请求</li><li>项目开发中用过哪些 ts 特性</li><li>状态码 301/302/403 含义</li><li>package.json 作用与常见字段含义</li><li>package-lock.json 作用</li><li>node 模块解析机制</li><li>FPS 帧率的概念 ❌</li><li>Vue 中如何定义一个组件（没搞懂这个问题的意思，只回答了 SFC</li><li>常用 Vue 指令</li><li>Vue3 中的 setup 函数具有什么作用？</li><li>算法：大数减法</li><li>Github 仓库中的 qq 机器人项目做了什么</li><li>get 与 post 请求的区别</li><li>https 的加密过程（TLS 四次握手）</li><li>TSL 加密过程是比较消耗性能的，对于 QQ 这样的大型应用，有没有什么好的方案可以优化</li><li>Web 安全：XSS 攻击与 SQL 注入</li><li>Vue2 与 Vue3 响应式原理的区别</li></ol><p><strong>三面</strong></p><ol><li>实习过程中比较有技术含量的地方</li><li>做可视化有什么心得</li><li>项目深挖：字节青训 - 依赖分析工具 <ol><li>你这个工具与市面上同类产品比较有什么优势？这个优势是如何实现的？具体的技术细节？</li><li>单测覆盖率如何测量的？具体是如何编写单元测试的？</li><li>Web UI 中具体布局是怎样的？展示了包的哪些信息？</li><li>具体是如何判断某个包在项目中存在版本冲突的？技术细节？如果一个包存在多版本冲突，在 Web UI 中如何展示？</li><li>自己开发过程中项目出现多版本冲突的情况是如何处理的？（引申到实习中处理依赖迁移时遇到的问题）</li></ol></li><li>了解哪些性能优化手段</li><li>常见的应用层协议有哪些？传输层呢？</li><li>（上一问衍生）SSE 的原理？</li><li>HTTP 2 与 https 的关系</li><li>QUIC 协议了解吗？</li><li>工具链： ESLint 与 Prettier 的应用场景，自己的项目中具体做过哪些配置？</li><li>心算题：5 点 15 分时针与分针的夹角 67.5°</li><li>平常有使用过 AI 吗？</li></ol><p>经常在用，平常也写过小玩具，例如将 GPT 接入飞书机器人，实现自动回复。遂询问我对 GPT 的接口做了哪些拓展，讲了下如何实现上下文历史记忆，又问我这个做法与网络中的开源项目有什么区别。</p><ol start="12"><li>是否有其他公司 offer 以及到岗时间</li></ol><h2 id="京东" tabindex="-1">京东 <a class="header-anchor" href="#京东" aria-label="Permalink to &quot;京东&quot;">​</a></h2>',11),f=t('<p>部门：CCO 体系</p><div class="tip custom-block"><p class="custom-block-title">时间线</p><ul><li>2024-03-15 一面</li><li>2024-03-20 上午 二面</li><li>2024-03-20 下午 三面</li></ul></div><p><strong>一面</strong></p><ol><li>实习业务与个人技术栈介绍</li><li>实习中印象深刻的点</li><li>可视化中是否有做过性能优化</li><li>如何学习前端知识的？对未来的规划是什么？</li><li>flex 布局常见属性及其取值：justify-content / align-items / flex-direction / flex-wrap</li><li>场景：利用 flex 使得文本与 icon 水平垂直居中</li><li>CSS 权重（最开始幻听成 CSS 全称了，哈哈哈太尴尬了）</li><li>position 有哪些值，含义是什么</li><li>自己开发过程中在哪用到过媒体查询？（移动端适配与打印样式）</li><li>js 数据类型有哪些？（基本数据类型与引用数据类型）</li><li>口头描述如何实现深拷贝</li><li>原型与原型链</li><li>递归实现从 1 加到 100</li><li>对于 Promise 的理解：解决回调地狱，链式调用，异步编程</li><li>async/await 如何搭配 Promise 使用？（本身是一个语法糖，不同的编码风格）</li><li>Vue2 与 Vue3 的区别（组合式 API 与响应式原理）</li><li>组件通信：props / emit / provide / inject / ref / vuex</li><li>watch 与 computed 的区别</li><li>什么时候使用 interface 与 type</li><li>git 拉取项目到提交 PR 的流程</li><li>如何进行版本回退</li></ol><p><strong>二面</strong></p><ol><li>React 中如何实现样式隔离？（CSS Modules）</li><li>JavaScript 操作 DOM 具有哪些 API？ <ol><li>创建 DOM ：createElement</li><li>插入 DOM ：appendChild / insertBefore</li><li>删除 DOM ：removeChild</li><li>查找 DOM ：getElementById / querySelector...</li><li>修改 DOM ：innerHTML / innerText / textContent</li></ol></li><li>useCallBack 与 useMemo 的使用场景</li><li>React 中父组件想要调用子组件的方法可以怎么做？<code>forwardRef &amp; useImperativeHandle</code></li><li>useEffect 使用场景。不传递第二个参数会怎么样？（会导致每次渲染都会执行）如何清理副作用？（返回一个清理函数）</li><li>常用的 TypeScript 类型有哪些？</li><li>对于 Promise 的理解</li><li>实现发布订阅模式</li><li>在构造函数中定义方法（或者属性）与在原型链上定义方法（或者属性）有什么区别？</li><li>了解哪些 CSS 单位</li><li>npm 如何登陆注册表（<code>npm login --registry=xx</code>）</li><li>npm 发包流程： <ol><li>本地测试：<code>npm link</code></li><li>更新版本号：<code>npm version major|minor|patch</code></li><li>发布包：<code>npm publish --access=public</code></li></ol></li><li>平常是否有记录技术博客？</li><li>声明响应式变量的方式有哪些？</li><li>watch 多个属性如何处理？深度监听如何处理？</li><li>Vue 生命周期</li></ol><p><strong>三面</strong></p><ol><li>实习经历介绍？为什么离职？</li><li>实现响应式布局的几种方案</li><li>跨域问题与解决方案</li><li>http 各种请求方式的作用与区别</li><li>口述实现防抖节流</li><li>设计一个简单的登录鉴权流程</li><li>手头上需求比较多并且可能无法按时交付的情况下怎么办？</li><li>在写某个需求时如果你觉得你的技术方案比较好，但是 mentor 与你意见不一致，你会怎么做？</li></ol>',8);function v(S,q,B,D,T,P){const l=h("HText");return k(),e("div",null,[E,s("p",null,[i("投递渠道: "),a(l,{type:"info"},{default:n(()=>[i(" 简历直推 ")]),_:1})]),r,s("p",null,[i("投递渠道: "),a(l,{type:"info"},{default:n(()=>[i(" BOSS 直聘")]),_:1})]),d,s("p",null,[i("投递渠道: "),a(l,{type:"info"},{default:n(()=>[i(" BOSS 直聘")]),_:1})]),g,s("p",null,[i("投递渠道: "),a(l,{type:"info"},{default:n(()=>[i(" BOSS 直聘 ")]),_:1})]),c,s("p",null,[i("投递渠道: "),a(l,{type:"info"},{default:n(()=>[i(" BOSS 直聘 ")]),_:1})]),y,s("p",null,[i("投递渠道: "),a(l,{type:"info"},{default:n(()=>[i(" BOSS 直聘 ")]),_:1})]),u,s("p",null,[i("投递渠道： "),a(l,{type:"info"},{default:n(()=>[i(" BOSS 直聘 ")]),_:1})]),F,s("p",null,[i("投递渠道： "),a(l,{type:"info"},{default:n(()=>[i(" BOSS 直聘 ")]),_:1})]),_,s("p",null,[i("投递渠道： "),a(l,{type:"warn"},{default:n(()=>[i(" 牛客网友内推 ")]),_:1})]),C,s("p",null,[i("投递渠道： "),a(l,{type:"info"},{default:n(()=>[i(" BOSS 直聘 ")]),_:1})]),m,s("p",null,[i("投递渠道： "),a(l,{type:"info"},{default:n(()=>[i(" BOSS 直聘 ")]),_:1})]),b,s("p",null,[i("投递渠道： "),a(l,{type:"true"},{default:n(()=>[i(" 简历被捞 ")]),_:1})]),A,s("p",null,[i("投递渠道： "),a(l,{type:"warn"},{default:n(()=>[i(" 学姐内推 ")]),_:1})]),f])}const I=p(o,[["render",v]]);export{x as __pageData,I as default};
