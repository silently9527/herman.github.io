import{_ as i,D as a,c as n,I as e,a4 as t,o as l}from"./chunks/framework.D1poPhlk.js";const p="/assets/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99.B3qwP3T7.jpg",F=JSON.parse('{"title":"","description":"","frontmatter":{"updateTime":"2023-11-27 10:55","desc":"教练，我想成为前端高手！JavaScript 是世界上最好的语言！(雾","tags":"八股/JavaScript","outline":"deep"},"headers":[],"relativePath":"Notes/Interviews/JavaScript 相关.md","filePath":"Notes/Interviews/JavaScript 相关.md","lastUpdated":1723472907000}'),h={name:"Notes/Interviews/JavaScript 相关.md"},o=t('<h2 id="数据类型相关" tabindex="-1">数据类型相关 <a class="header-anchor" href="#数据类型相关" aria-label="Permalink to &quot;数据类型相关&quot;">​</a></h2><ul><li>基本类型：Number, String, Boolean, Symbol, BigInt, null, undefined</li><li>引用类型：Object(Array, Set, Map...), Function</li></ul><p><strong>二者区别</strong>：</p><ul><li>基本类型：按值访问，直接存储在栈内存之中，值的复制是直接创建一个副本。</li><li>引用类型：按引用访问，数据存储在堆内存之中，栈内存中存储的是指向堆内存的指针。复制时只是复制了引用，而不是对象本身，当一个对象被多个变量引用时，修改其中一个变量的值会影响其他变量。</li></ul><h3 id="null-与-undefined" tabindex="-1">null 与 undefined <a class="header-anchor" href="#null-与-undefined" aria-label="Permalink to &quot;null 与 undefined&quot;">​</a></h3><ol><li><code>null</code> 可以理解为: 对象不存在. 当某个方法返回值是一个对象，但对象不存在时返回的就是 <code>null</code>.</li></ol><p>例如: <code>document.querySelector()</code>返回的是 DOM 对象，当没有查询到时返回的就是 <code>null</code>.</p><ol start="2"><li><p><code>undefined</code> 可以理解为: 缺少值.</p><ul><li>变量定义了但是没有赋值</li><li>访问对象中不存在的属性</li><li>函数没有返回值时的默认值</li></ul></li></ol><h3 id="弱等于和强等于" tabindex="-1">弱等于和强等于 <a class="header-anchor" href="#弱等于和强等于" aria-label="Permalink to &quot;弱等于和强等于&quot;">​</a></h3><ul><li>弱等于 <code>==</code>：只进行值比较，在比较时会先进行类型转换。</li><li>强等于 <code>===</code>: 先进行类型判断，如果类型不同，直接返回 false，如果类型相同，再进行值的比较。</li><li><code>Object.is()</code>: 主要用于处理 <code>NaN</code> 和 <code>+0/-0</code> 的特殊情况。</li></ul><p>一般情况下 <code>NaN==NaN</code> 会返回 <code>false</code>, <code>+0==-0</code> 会返回 <code>true</code>, 而 <code>Object.is(NaN,NaN)</code> 会返回 <code>true</code>, <code>Object.is(+0,-0)</code> 会返回 <code>false</code>.</p><h3 id="类型转换规则" tabindex="-1">类型转换规则 <a class="header-anchor" href="#类型转换规则" aria-label="Permalink to &quot;类型转换规则&quot;">​</a></h3><p>发生类型转换的情况：</p><ol><li>加减乘除运算：<code>+</code> 运算符会进行字符串拼接，而其他的运算符都会进行数值转换。</li><li>弱等于 <code>==</code> 运算符：会进行类型转换再进行比较。</li><li><code>if</code> 语句：会进行布尔值转换。</li><li>强制类型转换：<code>Number()</code>、<code>String()</code>、<code>Boolean()</code>等等。</li></ol><p><img src="'+p+`" alt="类型转换规则"></p><h3 id="判断数据类型的方法" tabindex="-1">判断数据类型的方法 <a class="header-anchor" href="#判断数据类型的方法" aria-label="Permalink to &quot;判断数据类型的方法&quot;">​</a></h3><ol><li><code>typeof</code>：只能用于判断<strong>基本类型与函数</strong>，对于其他任何对象都会返回 <code>object</code>。</li><li><code>instanceof</code>：通常用于判断<strong>对象</strong>的具体类型，例如 <code>arr instanceof Array</code>。其原理是检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</li><li><code>Object.prototype.toString.call()</code>：通用的判断方法，可以判断任何类型的数据。</li></ol><h3 id="const-let-var" tabindex="-1">const / let / var <a class="header-anchor" href="#const-let-var" aria-label="Permalink to &quot;const / let / var&quot;">​</a></h3><ul><li><code>var</code>：声明的变量会被提升到<strong>函数作用域</strong>的顶部，如果没有声明函数作用域，那么会被提升到全局作用域的顶部。<strong>可以重复声明</strong>。</li><li><code>let &amp; const</code>：声明的变量会被提升到<strong>块级作用域</strong>的顶部，但是存在<strong>暂时性死区</strong>。不可以重复声明。区别是 <code>let</code> 可以修改值，<code>const</code> 不可以修改值。</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-6wDCM" id="tab-gE4ygnt" checked><label for="tab-gE4ygnt">var 变量提升</label><input type="radio" name="group-6wDCM" id="tab-YUl4oVe"><label for="tab-YUl4oVe">const/let 变量提升</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以上代码与以下代码等价</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存在变量提升，但也存在暂时性死区。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ReferenceError: Cannot access &#39;a&#39; before initialization</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><h3 id="词法作用域" tabindex="-1">词法作用域 <a class="header-anchor" href="#词法作用域" aria-label="Permalink to &quot;词法作用域&quot;">​</a></h3><p>在 JavaScript 中具有三种作用域：全局作用域、函数作用域、块级作用域（ES6 新增，通过一对花括号或代码块定义）。如果一个变量或表达式不在当前作用域中，那么它就是不可用的。作用域可以堆叠成一个作用域链，当我们访问一个变量时，会先从当前作用域开始查找，如果没有找到，就会去上一级作用域查找，直到找到为止。需要注意的是，<strong>父级作用域无法访问子级作用域的变量</strong>。</p><h2 id="原型与原型链" tabindex="-1">原型与原型链 <a class="header-anchor" href="#原型与原型链" aria-label="Permalink to &quot;原型与原型链&quot;">​</a></h2><p>在 JavaScript 中，每个构造函数都具有 prototype 属性，它是一个指向原型对象的指针，原型对象上存放着一些公有的方法和属性。</p><p>当我们使用构造函数去创建一个对象实例时，这个实例的 <code>__proto__</code> 属性就指向了构造函数的 prototype 属性。（我们可以通过 <code>Object.getprototypeOf()</code> 方法来获取这个属性）</p><p>当我们访问实例的某个属性或者方法时，如果实例本身不存在这个方法或者属性，那么就会去它的 <strong>proto</strong> 属性所指向的原型对象上去查找，如果原型对象上还是不存在，那么就会去原型对象的 <strong>proto</strong> 属性所指向的原型对象上去查找，这样一层一层的查找下去，就形成了原型链。值得一提的是，原型链的终点是 null，它是所有对象的根原型。</p><p>根据原型链的这个特性，我们可以实现继承，比如说我们可以让一个构造函数的 prototype 属性指向另一个构造函数的实例，这样一来，这个构造函数的实例就可以访问另一个构造函数的实例上的属性和方法了。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tom.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><p>例如我们查找一个对象 tom 的属性 tom.phone 的流程如下:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * tom</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * -&gt; tom.__proto__(即 Person.prototype)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * -&gt; tom.__proto__.__proto__(即 Function.prototype)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * -&gt; tom.__proto__.__proto__.__proto__(即 Object.prototype)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * -&gt; tom.__proto__.__proto__.__proto__.__proto__(即 null)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div><p>原因是 <code>tom = new Person()</code> 时, <code>tom</code> 的隐式原型指向了 <code>Person.prototype</code>, 而 <code>Person</code> 函数是通过 <code>new Function()</code> 创建的,所以 <code>Person.prototype</code> 的隐式原型指向了 <code>Function.prototype</code>,同理 <code>Function.prototype</code> 的隐式原型指向了 <code>Object.prototype</code>,而 <code>Object.prototype</code> 的隐式原型指向了 <code>null</code>.</p><div class="info custom-block"><p class="custom-block-title">TIP</p><p>如果希望只在当前对象上查找属性，而不沿着原型链进行查找，可以使用 <code>hasOwnProperty()</code> 方法</p></div><h2 id="new-一个对象的过程" tabindex="-1">new 一个对象的过程 <a class="header-anchor" href="#new-一个对象的过程" aria-label="Permalink to &quot;new 一个对象的过程&quot;">​</a></h2><ol><li>创建一个空对象 <code>{}</code></li><li>将空对象的隐式原型 <code>_proto_</code> 指向构造函数的原型 <code>prototype</code>（在这一步箭头函数无法完成）</li><li>将构造函数的 <code>this</code> 指向第一步创建的空对象并调用构造函数。</li><li>没有返回对象则返回 <code>this</code></li></ol><p>简易实现：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myNew</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1. 创建新对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2. 设置原型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 3. 绑定 this 执行构造函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> constructor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, args);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 4. 返回对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;object&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="箭头函数与普通函数的区别" tabindex="-1">箭头函数与普通函数的区别 <a class="header-anchor" href="#箭头函数与普通函数的区别" aria-label="Permalink to &quot;箭头函数与普通函数的区别&quot;">​</a></h2><p>首先明确一点,箭头函数引入是为了更简洁的函数以及 <code>this</code> 的指向问题</p><ol><li>箭头函数的语法更加简单,<code>()=&gt;{}</code> 与 <code>function(){}</code> 的区别</li><li>箭头函数没有自己的 <code>this</code>,它的 <code>this</code> 是继承外层的 <code>this</code></li><li>箭头函数没有原型对象,所以不能作为构造函数.</li><li>箭头函数不绑定 <code>arguments</code>.</li></ol><h2 id="内存管理-垃圾回收" tabindex="-1">内存管理 &amp; 垃圾回收 <a class="header-anchor" href="#内存管理-垃圾回收" aria-label="Permalink to &quot;内存管理 &amp; 垃圾回收&quot;">​</a></h2><p>JavaScript 在创建变量时自动进行了内存的分配，并且在不使用它们时“自动释放”。释放的过程被称之为垃圾回收。内存的生命周期主要包括：分配内存，使用内存和释放内存。我们主要关注释放内存的过程，因为这是内存管理中最容易出现问题的地方。</p><p>释放内存的一个难点在于<strong>如何判断一个变量是否还有用</strong>。主要的垃圾回收算法有以下两种：</p><ol><li><strong>引用计数法</strong>：当一个对象被引用时，引用计数增加；当一个对象不再被引用时，引用计数减少。当引用计数为 0 时，对象就会被回收。这种算法的缺点是<strong>循环引用</strong>的问题。如果两个或多个对象互相引用，但它们之间不再被其他活跃的对象所引用，它们的引用计数将永远不会达到零，尽管它们已经不再被使用了。这种情况下，引用计数法就会导致内存泄漏。因此，现代浏览器已经不再使用这种算法。</li><li><strong>标记清除法</strong>：这种算法是目前主流的垃圾回收算法。它的基本思路是从根对象开始遍历所有的引用，标记所有被引用的对象，然后清除所有未被标记的对象。这种算法的优点是可以处理循环引用的情况。</li></ol><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><p>闭包在 JavaScript 中是作用域与作用域链概念的直接结果。作用域链是指内部作用域能够访问到外部作用域的变量，但外部作用域不能访问内部作用域的变量。闭包发生在函数嵌套的情况下，这样的函数结构创建了作用域链。</p><p>闭包的两个主要特性是：</p><ol><li><strong>私有变量</strong>：由于外部作用域无法访问内部作用域的变量，闭包可以用来创建私有变量。</li><li><strong>维持引用</strong>：闭包中的函数保留了对外部作用域的引用，这意味着外部作用域的变量不会被垃圾回收机制回收，因为它们仍被内部函数引用。</li></ol><p>总结来说，闭包与作用域链、垃圾回收紧密相关。它们可以用于实现私有变量、缓存变量等功能。然而，闭包的缺点是可能导致内存泄漏，尤其是当闭包的生命周期较长或者引用了大量数据时。</p><h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h2><h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h2><h2 id="喵喵喵-🐱" tabindex="-1">喵喵喵 🐱 <a class="header-anchor" href="#喵喵喵-🐱" aria-label="Permalink to &quot;喵喵喵 🐱&quot;">​</a></h2><h3 id="map-与-weakmap" tabindex="-1">Map 与 WeakMap <a class="header-anchor" href="#map-与-weakmap" aria-label="Permalink to &quot;Map 与 WeakMap&quot;">​</a></h3><ul><li><code>Map</code>：键值对集合，可以使用任何类型的值作为键，支持迭代。</li><li><code>WeakMap</code>：键值对集合，键只能是对象，不支持迭代，不会阻止垃圾回收机制回收键。具体而言当键被回收时，对应的值也会被回收。如果是 <code>Map</code> 的话，即使键被回收，值也不会被回收。</li></ul><h3 id="for-in-与-for-of" tabindex="-1">for...in... 与 for...of... <a class="header-anchor" href="#for-in-与-for-of" aria-label="Permalink to &quot;for...in... 与 for...of...&quot;">​</a></h3><ul><li><code>for...in...</code>：遍历对象的<strong>可枚举属性</strong>，包括自身属性和继承属性。 <ul><li>当我们使用 <code>for...in...</code> 遍历数组时，实际上遍历的是数组的索引。</li></ul></li><li><code>for...of...</code>：遍历<strong>可迭代对象</strong>的值，例如数组、字符串、Map、Set 等。 <ul><li><code>for...of...</code> 无法遍历对象，因为对象不是可迭代对象，除非我们手动实现迭代器。</li></ul></li></ul><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h2><h3 id="常见的工具函数" tabindex="-1">常见的工具函数 <a class="header-anchor" href="#常见的工具函数" aria-label="Permalink to &quot;常见的工具函数&quot;">​</a></h3>`,57);function k(r,d,c,E,g,y){const s=a("LinkCard");return l(),n("div",null,[o,e(s,{link:"https://juejin.cn/post/7084241167696527396",desc:"学习Typescript泛型工具函数，看这一篇就够了 | 掘金"})])}const b=i(h,[["render",k]]);export{F as __pageData,b as default};
